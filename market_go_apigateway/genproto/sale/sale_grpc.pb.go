// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: sale.proto

package sale

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaleServiceClient is the client API for SaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleServiceClient interface {
	GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Sale, error)
	Create(ctx context.Context, in *SalectCreate, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Sale, opts ...grpc.CallOption) (*Response, error)
}

type saleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleServiceClient(cc grpc.ClientConnInterface) SaleServiceClient {
	return &saleServiceClient{cc}
}

func (c *saleServiceClient) GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/sale.SaleService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Sale, error) {
	out := new(Sale)
	err := c.cc.Invoke(ctx, "/sale.SaleService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Create(ctx context.Context, in *SalectCreate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale.SaleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale.SaleService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Update(ctx context.Context, in *Sale, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale.SaleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleServiceServer is the server API for SaleService service.
// All implementations must embed UnimplementedSaleServiceServer
// for forward compatibility
type SaleServiceServer interface {
	GetAll(context.Context, *GetListRequest) (*GetListResponse, error)
	GetById(context.Context, *Pkey) (*Sale, error)
	Create(context.Context, *SalectCreate) (*Response, error)
	Delete(context.Context, *Pkey) (*Response, error)
	Update(context.Context, *Sale) (*Response, error)
	mustEmbedUnimplementedSaleServiceServer()
}

// UnimplementedSaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSaleServiceServer struct {
}

func (UnimplementedSaleServiceServer) GetAll(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSaleServiceServer) GetById(context.Context, *Pkey) (*Sale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSaleServiceServer) Create(context.Context, *SalectCreate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSaleServiceServer) Delete(context.Context, *Pkey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSaleServiceServer) Update(context.Context, *Sale) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSaleServiceServer) mustEmbedUnimplementedSaleServiceServer() {}

// UnsafeSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleServiceServer will
// result in compilation errors.
type UnsafeSaleServiceServer interface {
	mustEmbedUnimplementedSaleServiceServer()
}

func RegisterSaleServiceServer(s grpc.ServiceRegistrar, srv SaleServiceServer) {
	s.RegisterService(&SaleService_ServiceDesc, srv)
}

func _SaleService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).GetAll(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).GetById(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalectCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Create(ctx, req.(*SalectCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Delete(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sale)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Update(ctx, req.(*Sale))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleService_ServiceDesc is the grpc.ServiceDesc for SaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sale.SaleService",
	HandlerType: (*SaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _SaleService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _SaleService_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SaleService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SaleService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SaleService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sale.proto",
}

// SaleProductsServiceClient is the client API for SaleProductsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleProductsServiceClient interface {
	GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListSaleProductsResponse, error)
	GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*SaleProducts, error)
	Create(ctx context.Context, in *SaleProductsCreate, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *SaleProducts, opts ...grpc.CallOption) (*Response, error)
	PayType(ctx context.Context, in *PayTypes, opts ...grpc.CallOption) (*Response, error)
	Prodaja(ctx context.Context, in *Sold, opts ...grpc.CallOption) (*Response, error)
	Code(ctx context.Context, in *SaleCode, opts ...grpc.CallOption) (*SaleProductsCreate, error)
}

type saleProductsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleProductsServiceClient(cc grpc.ClientConnInterface) SaleProductsServiceClient {
	return &saleProductsServiceClient{cc}
}

func (c *saleProductsServiceClient) GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListSaleProductsResponse, error) {
	out := new(GetListSaleProductsResponse)
	err := c.cc.Invoke(ctx, "/sale.SaleProductsService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductsServiceClient) GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*SaleProducts, error) {
	out := new(SaleProducts)
	err := c.cc.Invoke(ctx, "/sale.SaleProductsService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductsServiceClient) Create(ctx context.Context, in *SaleProductsCreate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale.SaleProductsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductsServiceClient) Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale.SaleProductsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductsServiceClient) Update(ctx context.Context, in *SaleProducts, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale.SaleProductsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductsServiceClient) PayType(ctx context.Context, in *PayTypes, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale.SaleProductsService/PayType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductsServiceClient) Prodaja(ctx context.Context, in *Sold, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale.SaleProductsService/Prodaja", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductsServiceClient) Code(ctx context.Context, in *SaleCode, opts ...grpc.CallOption) (*SaleProductsCreate, error) {
	out := new(SaleProductsCreate)
	err := c.cc.Invoke(ctx, "/sale.SaleProductsService/Code", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleProductsServiceServer is the server API for SaleProductsService service.
// All implementations must embed UnimplementedSaleProductsServiceServer
// for forward compatibility
type SaleProductsServiceServer interface {
	GetAll(context.Context, *GetListRequest) (*GetListSaleProductsResponse, error)
	GetById(context.Context, *Pkey) (*SaleProducts, error)
	Create(context.Context, *SaleProductsCreate) (*Response, error)
	Delete(context.Context, *Pkey) (*Response, error)
	Update(context.Context, *SaleProducts) (*Response, error)
	PayType(context.Context, *PayTypes) (*Response, error)
	Prodaja(context.Context, *Sold) (*Response, error)
	Code(context.Context, *SaleCode) (*SaleProductsCreate, error)
	mustEmbedUnimplementedSaleProductsServiceServer()
}

// UnimplementedSaleProductsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSaleProductsServiceServer struct {
}

func (UnimplementedSaleProductsServiceServer) GetAll(context.Context, *GetListRequest) (*GetListSaleProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSaleProductsServiceServer) GetById(context.Context, *Pkey) (*SaleProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSaleProductsServiceServer) Create(context.Context, *SaleProductsCreate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSaleProductsServiceServer) Delete(context.Context, *Pkey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSaleProductsServiceServer) Update(context.Context, *SaleProducts) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSaleProductsServiceServer) PayType(context.Context, *PayTypes) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayType not implemented")
}
func (UnimplementedSaleProductsServiceServer) Prodaja(context.Context, *Sold) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prodaja not implemented")
}
func (UnimplementedSaleProductsServiceServer) Code(context.Context, *SaleCode) (*SaleProductsCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Code not implemented")
}
func (UnimplementedSaleProductsServiceServer) mustEmbedUnimplementedSaleProductsServiceServer() {}

// UnsafeSaleProductsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleProductsServiceServer will
// result in compilation errors.
type UnsafeSaleProductsServiceServer interface {
	mustEmbedUnimplementedSaleProductsServiceServer()
}

func RegisterSaleProductsServiceServer(s grpc.ServiceRegistrar, srv SaleProductsServiceServer) {
	s.RegisterService(&SaleProductsService_ServiceDesc, srv)
}

func _SaleProductsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleProductsService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductsServiceServer).GetAll(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleProductsService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductsServiceServer).GetById(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleProductsCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleProductsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductsServiceServer).Create(ctx, req.(*SaleProductsCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleProductsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductsServiceServer).Delete(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleProducts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleProductsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductsServiceServer).Update(ctx, req.(*SaleProducts))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductsService_PayType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayTypes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductsServiceServer).PayType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleProductsService/PayType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductsServiceServer).PayType(ctx, req.(*PayTypes))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductsService_Prodaja_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductsServiceServer).Prodaja(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleProductsService/Prodaja",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductsServiceServer).Prodaja(ctx, req.(*Sold))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductsService_Code_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductsServiceServer).Code(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale.SaleProductsService/Code",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductsServiceServer).Code(ctx, req.(*SaleCode))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleProductsService_ServiceDesc is the grpc.ServiceDesc for SaleProductsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleProductsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sale.SaleProductsService",
	HandlerType: (*SaleProductsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _SaleProductsService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _SaleProductsService_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SaleProductsService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SaleProductsService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SaleProductsService_Update_Handler,
		},
		{
			MethodName: "PayType",
			Handler:    _SaleProductsService_PayType_Handler,
		},
		{
			MethodName: "Prodaja",
			Handler:    _SaleProductsService_Prodaja_Handler,
		},
		{
			MethodName: "Code",
			Handler:    _SaleProductsService_Code_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sale.proto",
}
