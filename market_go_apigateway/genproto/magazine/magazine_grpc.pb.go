// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: magazine.proto

package magazine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MagazineServiceClient is the client API for MagazineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MagazineServiceClient interface {
	GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Magazine, error)
	Create(ctx context.Context, in *MagazineCreate, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Magazine, opts ...grpc.CallOption) (*Response, error)
}

type magazineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMagazineServiceClient(cc grpc.ClientConnInterface) MagazineServiceClient {
	return &magazineServiceClient{cc}
}

func (c *magazineServiceClient) GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/magazine.MagazineService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazineServiceClient) GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Magazine, error) {
	out := new(Magazine)
	err := c.cc.Invoke(ctx, "/magazine.MagazineService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazineServiceClient) Create(ctx context.Context, in *MagazineCreate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/magazine.MagazineService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazineServiceClient) Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/magazine.MagazineService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazineServiceClient) Update(ctx context.Context, in *Magazine, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/magazine.MagazineService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagazineServiceServer is the server API for MagazineService service.
// All implementations must embed UnimplementedMagazineServiceServer
// for forward compatibility
type MagazineServiceServer interface {
	GetAll(context.Context, *GetListRequest) (*GetListResponse, error)
	GetById(context.Context, *Pkey) (*Magazine, error)
	Create(context.Context, *MagazineCreate) (*Response, error)
	Delete(context.Context, *Pkey) (*Response, error)
	Update(context.Context, *Magazine) (*Response, error)
	mustEmbedUnimplementedMagazineServiceServer()
}

// UnimplementedMagazineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMagazineServiceServer struct {
}

func (UnimplementedMagazineServiceServer) GetAll(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMagazineServiceServer) GetById(context.Context, *Pkey) (*Magazine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedMagazineServiceServer) Create(context.Context, *MagazineCreate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMagazineServiceServer) Delete(context.Context, *Pkey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMagazineServiceServer) Update(context.Context, *Magazine) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMagazineServiceServer) mustEmbedUnimplementedMagazineServiceServer() {}

// UnsafeMagazineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MagazineServiceServer will
// result in compilation errors.
type UnsafeMagazineServiceServer interface {
	mustEmbedUnimplementedMagazineServiceServer()
}

func RegisterMagazineServiceServer(s grpc.ServiceRegistrar, srv MagazineServiceServer) {
	s.RegisterService(&MagazineService_ServiceDesc, srv)
}

func _MagazineService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazineServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magazine.MagazineService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazineServiceServer).GetAll(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazineService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazineServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magazine.MagazineService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazineServiceServer).GetById(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazineService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MagazineCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazineServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magazine.MagazineService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazineServiceServer).Create(ctx, req.(*MagazineCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazineService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazineServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magazine.MagazineService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazineServiceServer).Delete(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazineService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Magazine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazineServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magazine.MagazineService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazineServiceServer).Update(ctx, req.(*Magazine))
	}
	return interceptor(ctx, in, info, handler)
}

// MagazineService_ServiceDesc is the grpc.ServiceDesc for MagazineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MagazineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magazine.MagazineService",
	HandlerType: (*MagazineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _MagazineService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _MagazineService_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MagazineService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MagazineService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MagazineService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magazine.proto",
}
