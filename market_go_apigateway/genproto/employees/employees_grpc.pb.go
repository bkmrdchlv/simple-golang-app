// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: employees.proto

package employees

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeesServiceClient is the client API for EmployeesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeesServiceClient interface {
	GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Employees, error)
	Create(ctx context.Context, in *EmployeesCreate, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Employees, opts ...grpc.CallOption) (*Response, error)
	Register(ctx context.Context, in *Regist, opts ...grpc.CallOption) (*Response, error)
	Login(ctx context.Context, in *Loginer, opts ...grpc.CallOption) (*Response, error)
}

type employeesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeesServiceClient(cc grpc.ClientConnInterface) EmployeesServiceClient {
	return &employeesServiceClient{cc}
}

func (c *employeesServiceClient) GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/employees.EmployeesService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Employees, error) {
	out := new(Employees)
	err := c.cc.Invoke(ctx, "/employees.EmployeesService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) Create(ctx context.Context, in *EmployeesCreate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/employees.EmployeesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/employees.EmployeesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) Update(ctx context.Context, in *Employees, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/employees.EmployeesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) Register(ctx context.Context, in *Regist, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/employees.EmployeesService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) Login(ctx context.Context, in *Loginer, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/employees.EmployeesService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeesServiceServer is the server API for EmployeesService service.
// All implementations must embed UnimplementedEmployeesServiceServer
// for forward compatibility
type EmployeesServiceServer interface {
	GetAll(context.Context, *GetListRequest) (*GetListResponse, error)
	GetById(context.Context, *Pkey) (*Employees, error)
	Create(context.Context, *EmployeesCreate) (*Response, error)
	Delete(context.Context, *Pkey) (*Response, error)
	Update(context.Context, *Employees) (*Response, error)
	Register(context.Context, *Regist) (*Response, error)
	Login(context.Context, *Loginer) (*Response, error)
	mustEmbedUnimplementedEmployeesServiceServer()
}

// UnimplementedEmployeesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeesServiceServer struct {
}

func (UnimplementedEmployeesServiceServer) GetAll(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEmployeesServiceServer) GetById(context.Context, *Pkey) (*Employees, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedEmployeesServiceServer) Create(context.Context, *EmployeesCreate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEmployeesServiceServer) Delete(context.Context, *Pkey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEmployeesServiceServer) Update(context.Context, *Employees) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEmployeesServiceServer) Register(context.Context, *Regist) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedEmployeesServiceServer) Login(context.Context, *Loginer) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedEmployeesServiceServer) mustEmbedUnimplementedEmployeesServiceServer() {}

// UnsafeEmployeesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeesServiceServer will
// result in compilation errors.
type UnsafeEmployeesServiceServer interface {
	mustEmbedUnimplementedEmployeesServiceServer()
}

func RegisterEmployeesServiceServer(s grpc.ServiceRegistrar, srv EmployeesServiceServer) {
	s.RegisterService(&EmployeesService_ServiceDesc, srv)
}

func _EmployeesService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees.EmployeesService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).GetAll(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees.EmployeesService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).GetById(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeesCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees.EmployeesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Create(ctx, req.(*EmployeesCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees.EmployeesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Delete(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees.EmployeesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Update(ctx, req.(*Employees))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Regist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees.EmployeesService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Register(ctx, req.(*Regist))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Loginer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees.EmployeesService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Login(ctx, req.(*Loginer))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeesService_ServiceDesc is the grpc.ServiceDesc for EmployeesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employees.EmployeesService",
	HandlerType: (*EmployeesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _EmployeesService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _EmployeesService_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _EmployeesService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EmployeesService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EmployeesService_Update_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _EmployeesService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _EmployeesService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employees.proto",
}
