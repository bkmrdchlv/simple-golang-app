// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: remainder.proto

package remainder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemainderServiceClient is the client API for RemainderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemainderServiceClient interface {
	GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Remainder, error)
	Create(ctx context.Context, in *RemainderCreate, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Remainder, opts ...grpc.CallOption) (*Response, error)
	MinusCount(ctx context.Context, in *MinusCountRequest, opts ...grpc.CallOption) (*Response, error)
}

type remainderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemainderServiceClient(cc grpc.ClientConnInterface) RemainderServiceClient {
	return &remainderServiceClient{cc}
}

func (c *remainderServiceClient) GetAll(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/remainder.RemainderService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remainderServiceClient) GetById(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Remainder, error) {
	out := new(Remainder)
	err := c.cc.Invoke(ctx, "/remainder.RemainderService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remainderServiceClient) Create(ctx context.Context, in *RemainderCreate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/remainder.RemainderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remainderServiceClient) Delete(ctx context.Context, in *Pkey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/remainder.RemainderService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remainderServiceClient) Update(ctx context.Context, in *Remainder, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/remainder.RemainderService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remainderServiceClient) MinusCount(ctx context.Context, in *MinusCountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/remainder.RemainderService/MinusCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemainderServiceServer is the server API for RemainderService service.
// All implementations must embed UnimplementedRemainderServiceServer
// for forward compatibility
type RemainderServiceServer interface {
	GetAll(context.Context, *GetListRequest) (*GetListResponse, error)
	GetById(context.Context, *Pkey) (*Remainder, error)
	Create(context.Context, *RemainderCreate) (*Response, error)
	Delete(context.Context, *Pkey) (*Response, error)
	Update(context.Context, *Remainder) (*Response, error)
	MinusCount(context.Context, *MinusCountRequest) (*Response, error)
	mustEmbedUnimplementedRemainderServiceServer()
}

// UnimplementedRemainderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemainderServiceServer struct {
}

func (UnimplementedRemainderServiceServer) GetAll(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRemainderServiceServer) GetById(context.Context, *Pkey) (*Remainder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedRemainderServiceServer) Create(context.Context, *RemainderCreate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRemainderServiceServer) Delete(context.Context, *Pkey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRemainderServiceServer) Update(context.Context, *Remainder) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRemainderServiceServer) MinusCount(context.Context, *MinusCountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinusCount not implemented")
}
func (UnimplementedRemainderServiceServer) mustEmbedUnimplementedRemainderServiceServer() {}

// UnsafeRemainderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemainderServiceServer will
// result in compilation errors.
type UnsafeRemainderServiceServer interface {
	mustEmbedUnimplementedRemainderServiceServer()
}

func RegisterRemainderServiceServer(s grpc.ServiceRegistrar, srv RemainderServiceServer) {
	s.RegisterService(&RemainderService_ServiceDesc, srv)
}

func _RemainderService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemainderServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remainder.RemainderService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemainderServiceServer).GetAll(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemainderService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemainderServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remainder.RemainderService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemainderServiceServer).GetById(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemainderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemainderCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemainderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remainder.RemainderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemainderServiceServer).Create(ctx, req.(*RemainderCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemainderService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemainderServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remainder.RemainderService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemainderServiceServer).Delete(ctx, req.(*Pkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemainderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Remainder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemainderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remainder.RemainderService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemainderServiceServer).Update(ctx, req.(*Remainder))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemainderService_MinusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemainderServiceServer).MinusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remainder.RemainderService/MinusCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemainderServiceServer).MinusCount(ctx, req.(*MinusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemainderService_ServiceDesc is the grpc.ServiceDesc for RemainderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemainderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remainder.RemainderService",
	HandlerType: (*RemainderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _RemainderService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _RemainderService_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RemainderService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RemainderService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RemainderService_Update_Handler,
		},
		{
			MethodName: "MinusCount",
			Handler:    _RemainderService_MinusCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remainder.proto",
}
